'use client';

import * as THREE from 'three';
import { Suspense, useEffect, useRef, useState } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import {
  useGLTF,
  useTexture,
  // OrbitControls,
} from '@react-three/drei';
import { useSpring } from '@react-spring/core';
import { animated } from '@react-spring/three';
import { a as web } from '@react-spring/web';
import RoundedBox from './RoundedBox';
import HeroCamera from './HeroCamera';
import CanvasLoader from '@/app/components/Loading';

function MacBookModel({ open, hinge, ...props }) {
  const group = useRef();
  // Load model
  const { nodes, materials } = useGLTF('/assets/models/mac-draco.glb');
  const monitorTexture = useTexture('/assets/images/base.jpg');
  const monitorTexture2 = useTexture('/assets/images/1.jpg');
  const monitorTexture3 = useTexture('/assets/images/2.jpg');

  const [bg, setBg] = useState(monitorTexture);

  // Take care of cursor state on hover
  const [hovered, setHovered] = useState(false);
  useEffect(
    () => void (document.body.style.cursor = hovered ? 'pointer' : 'auto'),
    [hovered],
  );

  useEffect(() => {
    const bgs = [monitorTexture, monitorTexture2, monitorTexture3];
    let count = 0;
    const id = setInterval(() => {
      count += 1;
      if (count === 3) {
        count = 0;
      }
      setBg(bgs[count]);
    }, 3000);

    return () => {
      clearInterval(id);
    };
  }, []);

  // Make it float in the air when it's opened
  useFrame(state => {
    const t = state.clock.getElapsedTime();
    group.current.rotation.x = THREE.MathUtils.lerp(
      group.current.rotation.x,
      open ? Math.cos(t / 10) / 10 + 0.35 : 0,
      0.1,
    );
    group.current.rotation.y = THREE.MathUtils.lerp(
      group.current.rotation.y,
      open ? Math.sin(t / 10) / 6 : 0,
      0.1,
    );
    group.current.rotation.z = THREE.MathUtils.lerp(
      group.current.rotation.z,
      open ? Math.sin(t / 10) / 30 : 0,
      0.1,
    );

    group.current.position.y = THREE.MathUtils.lerp(
      group.current.position.y,
      open ? (-2 + Math.sin(t)) / 3 : -4.3,
      0.1,
    );
  });

  // The view was auto-generated by: https://github.com/pmndrs/gltfjsx
  // Events and spring animations were added afterwards

  return (
    <group
      ref={group}
      {...props}
      onPointerOver={e => (e.stopPropagation(), setHovered(true))}
      onPointerOut={() => setHovered(false)}
      dispose={null}
    >
      <animated.group rotation-x={hinge} position={[0, -0.04, 0.41]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            material={materials.aluminium}
            geometry={nodes['Cube008'].geometry}
          />
          <mesh
            material={materials['matte.001']}
            geometry={nodes['Cube008_1'].geometry}
          />
          <mesh
            material={materials['screen.001']}
            geometry={nodes['Cube008_2'].geometry}
          >
            <meshMatcapMaterial map={bg} />
          </mesh>
        </group>
      </animated.group>
      <mesh
        material={materials.keys}
        geometry={nodes.keyboard.geometry}
        position={[1.79, 0, 3.45]}
      />
      <group position={[0, -0.1, 3.39]}>
        <mesh
          material={materials.aluminium}
          geometry={nodes['Cube002'].geometry}
        />
        <mesh
          material={materials.trackpad}
          geometry={nodes['Cube002_1'].geometry}
        />
      </group>
      <mesh
        material={materials.touchbar}
        geometry={nodes.touchbar.geometry}
        position={[0, -0.03, 1.2]}
      />
    </group>
  );
}

export default function FloatingLaptop() {
  // This flag controls open state, alternates between true & false
  const [open, setOpen] = useState(false);
  // We turn this into a spring animation that interpolates between 0 and 1
  const props = useSpring({ open: Number(open) });

  return (
    <web.main
      style={{
        height: 800,
        background: props.open.to([0, 1], ['#223', '#112']),
      }}
    >
      <Canvas dpr={[1, 2]} camera={{ position: [0, 0, -30], fov: 50 }}>
        <ambientLight intensity={0.8} />
        <directionalLight position={[0, 10, -10]} intensity={1} />
        <animated.directionalLight
          position={[3, 10, 10]}
          intensity={3}
          color={props.open.to([0, 1], ['#adf', '#1af'])}
        />
        <animated.directionalLight
          position={[-5, 10, 10]}
          intensity={3}
          color={props.open.to([0, 1], ['#faa', '#d25578'])}
        />

        <Suspense fallback={<CanvasLoader />}>
          <group
            rotation={[0, Math.PI, 0]}
            onClick={e => (e.stopPropagation(), setOpen(!open))}
          >
            <HeroCamera isMobile={!open}>
              <MacBookModel
                open={open}
                hinge={props.open.to([0, 1], [1.575, -0.425])}
              />
              <RoundedBox
                show={open}
                opacity={props.open.to([0, 1], [0, 1])}
                image="/assets/images/react.svg"
                speed={0.02}
                scale={props.open.to([0, 1], [0, 0.7])}
                position={[6, 2, 6]}
                rotation={[0.6, 0, 0]}
              />
              <RoundedBox
                show={open}
                opacity={props.open.to([0, 1], [0, 1])}
                image="/assets/images/js.svg"
                speed={0.015}
                scale={props.open.to([0, 1], [0, 0.5])}
                position={[-5, 4.5, 2]}
                rotation={[0.9, 0.3, 0]}
              />
              <RoundedBox
                show={open}
                opacity={props.open.to([0, 1], [0, 1])}
                image="/assets/images/nodejs.svg"
                speed={0.018}
                scale={props.open.to([0, 1], [0, 0.6])}
                position={[-6, -1, 6]}
                rotation={[0.3, 0.6, 0]}
              />
            </HeroCamera>
          </group>
        </Suspense>
      </Canvas>
    </web.main>
  );
}
